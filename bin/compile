#!/usr/bin/env bash
set -Eeuo pipefail

# https://devcenter.heroku.com/articles/buildpack-api#bin-compile

BUILD_DIR="${1}"
CACHE_DIR="${2}"
# ENV_DIR="${3}"

panic() {
    echo "FATAL: ${*}" | indent
    exit 1
}

step() {
    echo "-----> ${*}"
}

info() {
    echo "${*}" | indent
}

indent() {
    sed 's/^/       /'
}

curl_download() {
    local url="${1}"
    curl --proto '=https' --tlsv1.2 \
        --silent \
        --show-error \
        --fail \
        --header "Accept: application/vnd.github+json" \
        --header "X-GitHub-Api-Version: 2022-11-28" \
        --location "${url}"
}

github_latest_tag() {
    local owner="${1}"
    local repo="${2}"
    curl_download "https://api.github.com/repos/${owner}/${repo}/releases/latest" \
        | grep --perl-regexp --only-matching '(?<="tag_name": ")(\S+)(?=")'
}

github_latest_vx_tag() {
    local owner="${1}"
    local repo="${2}"
    local prefix="${3}"
    curl_download "https://api.github.com/repos/${owner}/${repo}/releases" \
        | jq --raw-output --arg prefix "${prefix}" \
            'map(select((.prerelease | not) and (.draft | not) and (.tag_name | startswith($prefix)))) | max_by(.tag_name) | .tag_name'
}

main() {
    local latest_tag latest_version download_path layer_dir caddy_url

    if [ "${CADDY_RELEASE:-}" == "" ]; then
        step "Asking GitHub for latest version of Caddy..."
        latest_tag="$(github_latest_tag caddyserver caddy)"

        # make sure we have a version of caddy we've tested with (currently 2.x)
        case "${latest_tag}" in
            v2.*)
                info "Caddy version: ${latest_tag}"
            ;;
            *)
                info "Expected caddy version 2.x -- got ${latest_tag}"
                latest_tag="$(github_latest_vx_tag caddyserver caddy v2)"
                info "Falling back to latest 2.x release: ${latest_tag}"
            ;;
        esac
    else
        latest_tag="${CADDY_RELEASE}"
    fi

    mkdir --parent "${CACHE_DIR}"
    download_path="${CACHE_DIR}/${latest_tag}.tar.gz"
    if [ -f "${download_path}" ]; then
        step "Found Caddy ${latest_tag} in download cache"
    else
        # strip the leading `v` from the tag name
        latest_version="$(echo "${latest_tag}" | cut -c 2-)"
        caddy_url="https://github.com/caddyserver/caddy/releases/download/${latest_tag}/caddy_${latest_version}_linux_amd64.tar.gz"
        step "Downloading Caddy from ${caddy_url}..."
        curl_download "${caddy_url}" > "${download_path}.tmp"
        mv "${download_path}.tmp" "${download_path}"
    fi

    step "Extracting Caddy..."
    layer_dir="${BUILD_DIR}/caddy"
    bin_dir="${layer_dir}/bin"
    mkdir --parent "${bin_dir}"
    (
        umask ugo=r
        tar --extract --gzip --to-stdout --file "${download_path}" "caddy" > "${bin_dir}/caddy"
    )
    chmod +x "${bin_dir}/caddy"
    "${bin_dir}/caddy" --version | indent
}

main
